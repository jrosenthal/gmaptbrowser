<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<!--
GMaptBrowser written and released by Joshua Rosenthal (maric423+gmb@gmail.com) under GPL v.3 - 25 June 2009

    Copyright (C) 2009 by Joshua Rosenthal

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

0.989 - Allow users to click on the map and use all functionality without searching first.
0.988 - Added scroll wheel zoom using google maps utility library scroll wheel zoom as per - http://google-maps-utility-library-v3.googlecode.com/svn/tags/scrollwheelzoom/1.0/docs/reference.html
      - Bugfix: failed to pan when set_center short distance away. Workaround: put set_zoom first (bug 1567)
	  - 11 August 2009
0.987 - update for draggable markers
0.986 - update for google.maps.event.trigger(map, 'resize')
0.97 - resizing
0.96 - more settings, display of Lat/Lon, UTMs for North America, search by lat/lon and by UTM
0.95 - fixed reverse geocoding of geocoded coordinate (which is gives weird errors in google maps, as documented on the listservs, and acknowledged as a probable bug)
0.94 - added setting screen for resizing, zoom control, and clearing cookies, 
and cookie support for resizing, zoom control, and app. - 10 July 2009
-->
<title>Google Maps > Maptitude Browser</title>
<hta:application
	ID = "M_GLocMap"
	SCROLL = "no"
	BORDER = "auto"
	CAPTION = "yes"
	SELECTION = "no"
	NAVIGABLE = "no"
	/>

<head>
<!--script type='text/javascript'
//border = thin normal, auto for firebug
        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script-->
<style>

#address{
width:100%;
}
#address_search{
	position:absolute;
	height:75px;
	top:0px;
	left:1px;
	right:1px;
}

#map_canvas{
border:thin solid;
	position:absolute;
	top:77px;
	bottom:25px;
	left:1px;
	right:1px;
}

#buttons{
float:left;
}
#toggles span {
font-size:.75em;
width:50px;
float:left;
}
#toggles input{
margin-top:5px;
margin-left:5px;
float:left;
}
#geocode_container {
position:absolute;
bottom:1px;
height:25px;
left:1px;
right:1px;

}
#geocode{
margin-top:-3px;
font-size:.75em;
float:left;
}
.button{
overflow:visible;
width:1;
}
#birdseye_link{
font-size:.75em;
margin-left:5px;
font-style:italic;
margin-top:10px;
}
#externalAppButton{
position:absolute;
left:-10000px;
}
#settings_button_container, #close_settings_button_container{
	position:absolute;
	right:0px;
	bottom:0px;
	height:16px;
	width:16px;
	z-index:10000;
}

 #info_button_container {
	position:absolute;
	right:20px;
	bottom:0px;
	height:16px;
	width:16px;
	z-index:10000;
}


	.normalButton{
	background-image:url('img/cog.png');
	}
	.hoverButton{
	cursor:pointer;
	background-image:url('img/cog_go.png');
	}

	.normalMapButton{
	background-image:url('img/map.png');
	}
	.hoverMapButton{
	cursor:pointer;
	background-image:url('img/map_go.png');
	}
	
	.normalInfoButton{
	background-image:url('img/information.png');
	}
	.hoverInfoButton{
	cursor:pointer;
	background-image:url('img/information.png');
	}




#settingsScreen, #infoScreen{
display:none;
font-size:.8em;
height:100%;
width:100%;
}

#settingsList, #infoList{
border:1px solid gray;
overflow:auto;
height:90%;
width:100%;
}

#clearCookies{
position:absolute;
bottom:1px;
left:1px;
width:100px;
}

#clearCookiesText{
position:absolute;
bottom:5px;
left:105px;
width:100px;
font-style:italic;
color:gray;
}

 

#close_settings{
position:absolute;
bottom:1px;
right:1px;
}
#coordinates{
clear:both;
font-size:.9em;
}

#zoomMaptButton{
display:none;
}

legend{
font-weight:bold;
}

fieldset fieldset legend{
font-style:italic;
}


</style>
</head>

<body onload="initialize();">
<div id="container">
<div id="address_search">
    <input id="address" type="textbox" value="Boston, MA"><br>
    <span id="buttons">
		<input class="button" type="button" value="Search" onclick="codeAddress()">
        <input class="button" type="button" id='zoomMaptButton' value="Zoom Maptitude" onclick="zoomMapt()">
		<input id="externalAppButton" class="button externalApp" type="button" value="" onclick="">
	</span>
	<span id="toggles">
	</span>
    <span id="birdseye_link">
    &nbsp;&nbsp;&nbsp;
    </span>
    <div id='coordinates'>
	<input type='text' id="coords1" onfocus="this.select();" value='Lat/Lon' readonly></input>
	<input type='text' id="coords2" onfocus="this.select();" value='UTM' readonly></input>
	
	</div>
</div>

	<div id="map_canvas"></div>
<div id="geocode_container">
	<div id="geocode">
			<span id="geocode_label">Reverse Geocode</span>:<br>
			<span id="geocode_acc"></span>
	</div>
	<span id="geocode_results"></span>
</div>
<div class='normalButton viewToggle' id='settings_button_container' onmouseover='this.className="hoverButton"' onmouseout='this.className="normalButton"' onclick='displaySettings();'>
	<a id='settings_button' href="#" onclick='displaySettings();'></a>
	</div>
</div>

<div id="settingsScreen">
<b>Settings</b>
<div id="settingsList">
<form name='settings'>
<fieldset>
<legend>Zoom Control</legend>
<input type='checkbox' id='zoomcontrol' value='1' onclick='setZoomControl()'  > Display small Zoom Control (will refresh application)<br>
</fieldset><br>

<!-- fieldset>
<legend>Coordinates</legend>

(Eventually should have checkboxes for each of multiple coordinate boxes - ... drop downs for Coords1, Coords2 (latlon, utm (US only))
</fieldset><br-->


<fieldset>
<legend>Applications</legend>
<fieldset><legend>Maptitude</legend>
<input type='checkbox' id='hideMaptButton' onclick='setHideMapt()'> Disable Maptitude Connections<br>
		<input id="zoomMaptOnSearch" type=CHECKBOX name="zoomMaptOnSearch"><span>Zoom on Search</span><br>
		<input id="zoomMaptOnClick" type=CHECKBOX name="zoomMaptOnClick"><span>Zoom on Click</span>
</fieldset>
<fieldset><legend>User Application</legend>
Current Application: <span id='currentUserApp'><i>inactive</i></span>&nbsp;<br>
&nbsp;&nbsp;&nbsp;<span id='resetCurrentUserApp'><a href="#" onclick='setCookie("userApp","",new Date() -100);initializeExternalAppButton()'>Reset current application</a></span><br>
		<input id="runAppOnSearch" type=CHECKBOX DISABLED name="runAppOnSearch"><span>Run User Application on Search</span><br>
		<input id="runAppOnClick" type=CHECKBOX DISABLED name="runAppOnClick"><span>Run User Application on Click</span>
</fieldset>
</fieldset><br>


</form>
</div>
<div class='normalMapButton viewToggle' id='close_settings_button_container' onmouseover='this.className="hoverMapButton"' onmouseout='this.className="normalMapButton"' onclick='hideSettings();'>
<a id='close_settings' href="#" onclick='hideSettings();'></a>
	</div>
<div class=	'normalInfoButton viewToggle' id='info_button_container' onmouseover='this.className="hoverInfoButton";' onmouseout='this.className="normalInfoButton";' onclick='displayInfo();'>
</div>	
	
<input id='clearCookies' class='reset_settings' type='button' onclick='clearCookies()' value="Reset Settings" width="100px"><span id='clearCookiesText' class='reset_settings'>Cntrl-Alt-R</span>


</div>

<div id="infoScreen">
<div id="infoList">
<p>GMaptBrowser - Copyright 2009 by Joshua Rosenthal -<img src="img/authorContact.png" style="vertical-align:bottom";>, licensed under GPLv3<br>
<i>This program comes with ABSOLUTELY NO WARRANTY; (see <a href="http://www.gnu.org/copyleft/gpl.html#section15" target="_blank">details</a>.)<br>
This is free software, and you are welcome to redistribute it under certain conditions; (see <a href="http://www.gnu.org/copyleft/gpl.html#section2" target="_blank">details</a>.)<br>
As this tool uses the Google Maps API, its use is subject to the Google Maps API <a href="http://code.google.com/apis/maps/terms.html">Terms of Use</a></I>
</p><br>
GMaptBrowser allows you to use a Google Map as a means to browse to a location, and then go to that location using an external program.  It is preconfigured to work with Maptitude, but can also work with other applications by means of a simple linking script, designed to take WGS84 Lat/Lon as command line parameters.<br>
<p>External Linking Scripts<br>
To use, create a script titled llApp-*.exe, where * is the name you want on your control button.  The script must take a WGS84 lat/lon coordinate pair as command line parameters, eg: llApp-EFS.exe 42.23 -71.32<br>
Place the script in the same directory as GMaptBrowser, and GMaptBrowser will detect the script when it is reset.<br>
<br>Scripts can be easily written in AutoHotkey, AutoIt, any other scripting/programming language of choice.<br></P>




</div>
<div class='normalButton viewToggle' id='settings_button_container' onmouseover='this.className="hoverButton"' onmouseout='this.className="normalButton"' onclick='hideInfo();'>
	<a  href="#" onclick='hideInfo();'></a>
	</div>
</div>

<SCRIPT TYPE="TEXT/JAVASCRIPT">



function clearCookies() {
	var expDate = new Date() -10;
	setCookie("userApp","",expDate);
	setCookie("userZoomControl","",expDate);
	setCookie("userCustomSize","",expDate);
	setCookie("maptFcn","",expDate);
}

function getCookie(c_name) {
	if (document.cookie.length>0)
	  {
	  c_start=document.cookie.indexOf(c_name + "=");
	  if (c_start!=-1)
		{
		c_start=c_start + c_name.length+1;
		c_end=document.cookie.indexOf(";",c_start);
		if (c_end==-1) c_end=document.cookie.length;
		return unescape(document.cookie.substring(c_start,c_end));
		}
	  }
	return "";
}

function setCookie(c_name,value,expiredays) {
	var exdate=new Date();
	exdate.setDate(exdate.getDate()+expiredays);
	document.cookie=c_name+ "=" +escape(value)+
	((expiredays==null) ? "" : ";expires="+exdate.toGMTString());
}

</SCRIPT>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<!--script src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/scrollwheelzoom/1.0/src/scrollwheelzoom_packed.js" type="text/javascript"></script>
<script src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/keydragzoom/1.0/src/keydragzoom_packed.js" type="text/javascript"></script-->
<script src="lib/scrollwheelzoom_packed.js" type="text/javascript"></script>
<script src="lib/keydragzoom_packed.js" type="text/javascript"></script>

<script type="text/javascript" src="lib/proj4js-compressed.js"></script>
<!-- script type="text/javascript" src="http://jqueryjs.googlecode.com/files/jquery-1.3.2.min.js"></script -->
<script type="text/javascript">

var cookieDuration = 366;
var birdseye_window = null;
var annotation_id = null;
var thisMap, Gisdk;

var map;
var marker;

var userCustomSize = getCookie("userCustomSize") || "600|500";
	window.resizeTo(userCustomSize.split("|")[0],userCustomSize.split("|")[1]);

var userCustomSizeDiff = [];
	userCustomSizeDiff[0] = userCustomSize.split("|")[0] - document.documentElement.clientWidth;
	userCustomSizeDiff[1] = userCustomSize.split("|")[1] - document.documentElement.clientHeight;

var maptitudeFunctions = getCookie("maptFcn") || 1;

var zoomControl = getCookie("userZoomControl") || "ZOOM_PAN";
var prevZoomControl = zoomControl;
var lastWidth,lastHeight;


//function getGeonamesAtCoord (gLon,gLat) {
	// http://ws.geonames.org/findNearbyPlaceNameJSON?lat=47.3&lng=9
//}


function setHideMapt() {
	if (document.getElementById("hideMaptButton").checked) {
		document.getElementById("zoomMaptOnSearch").checked = false;
		document.getElementById("zoomMaptOnSearch").disabled=true;
		document.getElementById("zoomMaptOnClick").checked = false;
		document.getElementById("zoomMaptOnClick").disabled=true;
		document.getElementById("zoomMaptButton").style.display="none";
		setCookie("maptFcn",0,366);
	} else {
		document.getElementById("zoomMaptButton").style.display="inline";
		document.getElementById("zoomMaptOnClick").disabled=false;
		document.getElementById("zoomMaptOnSearch").disabled=false;
		setCookie("maptFcn",1,366);
	}
}

function zoomMaptitudeTo(gLon,gLat){
	var lonMil = Math.round(gLon*1000000);
    var latMil = Math.round(gLat*1000000);
	try {
		Gisdk = new ActiveXObject("Maptitude.AutomationServer");
		thisMap = Gisdk.Function("GetMap");
		var thisCoord = Gisdk.Function("Coord",lonMil,latMil);
		Gisdk.Function("CenterMap",thisMap,thisCoord);
		Gisdk.Function("SetScale",thisMap,2000);
		Gisdk.Function("RedrawMap",thisMap);
	} catch (err) {
		alert ('Please make sure that maptitude is open, and the map you wish to view is loaded.');
		//console.log(err);
	}
	
}

function zoomMapt () {
// just a wrapper for ZoomMaptitudeTo(lon,lat) which adds in a check before referencing markers.
	if (marker) {
	   zoomMaptitudeTo(marker.get_position().lng(),marker.get_position().lat());
	   }
}



function initialize() {
	self.resizeTo(userCustomSize.split("|")[0],userCustomSize.split("|")[1]);

	var navStyle = {};
	if (zoomControl == "ZOOM_PAN") {
		navStyle.style = google.maps.NavigationControlStyle.ZOOM_PAN;
		document.getElementById("zoomControl").checked=false;
		} 
	else {
		navStyle.style = google.maps.NavigationControlStyle.SMALL;
		document.getElementById("zoomControl").checked=true;
	}
	if (maptitudeFunctions == 0) {
		document.getElementById("hideMaptButton").checked = true;
		} 
	else {
		document.getElementById("zoomMaptButton").style.display='none';
		document.getElementById("hideMaptButton").checked = false;
	}
	setHideMapt();
    geocoder = new google.maps.Geocoder();
    var latlng = new google.maps.LatLng(42.40721, -71.38244);
    var myOptions = {
      zoom: 8,
      center: latlng,
      mapTypeId: google.maps.MapTypeId.HYBRID,
      mapTypeControl: true,
      mapTypeControlOptions: {style: google.maps.MapTypeControlStyle.DROPDOWN_MENU},
	  navigationControlOptions: navStyle
    };
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
	lastWidth = document.documentElement.clientWidth;
	lastHeight = document.documentElement.clientHeight;
	document.getElementById('map_canvas').style.height = Math.abs(lastHeight - 110) + 'px';
	document.getElementById('map_canvas').style.width = Math.abs(lastWidth - 5)+ "px";
  
	window.onresize = function () {
	var minHeight = 110, minWidth = 5;
		var currHeight = document.documentElement.clientHeight, currWidth = document.documentElement.clientWidth;
		if ((currWidth != lastWidth) || (currHeight != lastHeight)) {
		if (currHeight > minHeight) { document.getElementById('map_canvas').style.height = currHeight - 110 + 'px'; }
		if (currWidth > minWidth) { document.getElementById('map_canvas').style.width = currWidth - 5+ "px"; }
		setCookie("userCustomSize",(currWidth+userCustomSizeDiff[0])+"|"+(userCustomSizeDiff[1]+currHeight),366); // numbers seemed optimized for vista... too big for xp.
		lastWidth = currWidth;
		lastHeight = currHeight;
		google.maps.event.trigger(map, 'resize');
		}
	};
	if (map.enableScrollWheelZoom)
		map.enableScrollWheelZoom();  // ScrollWheel plugin library
	if (map.enableKeyDragZoom)	
		 map.enableKeyDragZoom(
				{key:'ctrl',               
				paneStyle: {
                  backgroundColor: "gray",
                  opacity: 0.2
				  }
                });
		
	google.maps.event.addListener(map,'click',function(event) {
		if (!marker) {generateMarker(event.latLng);}
		if (marker) { // gratuitous test.
			marker.set_position(event.latLng);
			if (document.getElementById("zoomMaptOnClick").checked) {
				zoomMaptitudeTo(event.latLng.lng(),event.latLng.lat()); 
				}
		geocoder.geocode({'latLng':marker.get_position()},reverseGeocodeHandler);
		}
	});		
  
  }
 Proj4js.defs["EPSG:4326"] = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
 Proj4js.defs["EPSG:26901"] = "+proj=utm +zone=1 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26902"] = "+proj=utm +zone=2 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26903"] = "+proj=utm +zone=3 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26904"] = "+proj=utm +zone=4 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26905"] = "+proj=utm +zone=5 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26906"] = "+proj=utm +zone=6 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26907"] = "+proj=utm +zone=7 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26908"] = "+proj=utm +zone=8 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26909"] = "+proj=utm +zone=9 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26910"] = "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26911"] = "+proj=utm +zone=11 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26912"] = "+proj=utm +zone=12 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26913"] = "+proj=utm +zone=13 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26914"] = "+proj=utm +zone=14 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26915"] = "+proj=utm +zone=15 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26916"] = "+proj=utm +zone=16 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26917"] = "+proj=utm +zone=17 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26918"] = "+proj=utm +zone=18 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26919"] = "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26920"] = "+proj=utm +zone=20 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26921"] = "+proj=utm +zone=21 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26922"] = "+proj=utm +zone=22 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";
 Proj4js.defs["EPSG:26923"] = "+proj=utm +zone=23 +ellps=GRS80 +datum=NAD83 +units=m +no_defs";

//Proj4js.reportError = function(msg) {console.log(msg);}

  function displayCoords(lat, lon) {
	document.getElementById('coords1').value=lat.toFixed(6) + ", " + lon.toFixed(6);
	// -180 - -42
	if ((-42 > lon && lon >= -180) && (0 <= lat && lat <= 84)) {  // if potentially valid north american zone (zone 1N-23N) UTMs
		var zone = Math.floor((lon+180)/6)+1;  // calculates zones, although -42 exactly would produce zone 24... should catch that, or ignore it (IGNORING in if -42 > lon.)
		var epsg = 26900+zone;
		var source = new Proj4js.Proj('EPSG:4326');    
		var dest = new Proj4js.Proj('EPSG:'+epsg);    
		var p = {x:lon,y:lat};
		Proj4js.transform(source, dest, p);      //do the transformation.  x and y are modified in place	
		document.getElementById('coords2').value=zone+"." + p.x.toFixed(0) + "." + p.y.toFixed(0);
	} else  { document.getElementById('coords2').value = "Not Available"; }
  }

function codeAddress() {
    var address = document.getElementById("address").value;
	// is address an address, not a #?
	var regexpLetters = "[A-Za-z]+";
	var regexpLatLng= "^[0-9]{0,3}[\.]?[0-9]{0,10},.?[-]?[0-9]{1,3}[\.]?[0-9]{0,10}"; //numbers (period,numbers,) comma (space) number (period,numbers) //[0-9\.\s-,]+  
	var regexpUTM="^[0-9]{1,2}[\.][0-9]{1,10}[\.][0-9]{1,10}"; // ##.#######.####### numbers, period, numbers, period, numbers - doesn't allow the use of decimal UTM
	if (address.match(regexpLetters)) {	
    geocoder.geocode( { address: address}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK && results.length) {
        // You should always check that a result was returned, as it is
        // possible to return an empty results object.
        if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
			map.set_zoom(17); // needs to be before set_center in order to allow moving the map small amounts (bug 1567)
	        map.set_center(results[0].geometry.location);
			displayCoords(results[0].geometry.location.lat(),results[0].geometry.location.lng());
			document.getElementById('geocode_label').innerHTML = "Geocode";
			document.getElementById('geocode_results').innerHTML = results[0].formatted_address;
			document.getElementById('geocode_acc').innerHTML = results[0].geometry.location_type;
			if (results[0].geometry.location_type.length > 14) {
				document.getElementById('geocode_acc').style.fontSize =".8em";
			} else {
				document.getElementById('geocode_acc').style.fontSize ="";
			}
			
			if (document.getElementById("zoomMaptOnSearch").checked) {
				zoomMaptitudeTo(results[0].geometry.location.lng(),results[0].geometry.location.lat());
				}
          if (marker) {
            marker.set_position(results[0].geometry.location);
          }
          else {
			generateMarker(results[0].geometry.location);
             }
         }
      } else {
        alert("Geocode was unsuccessful due to: " + status);
	  }
	});
	} // match /w
	else { // only numbers
		var decDegAddress = address.match(regexpLatLng);
		if (decDegAddress) {
			var thisLoc = new google.maps.LatLng(parseFloat(decDegAddress[0].split(",")[0]),parseFloat(decDegAddress[0].split(",")[1]));
			if (marker) {
				marker.set_position(thisLoc);
			} else { // else, generate and wireup marker - need to abstract that code.
				generateMarker(thisLoc);
				}
				
			map.set_zoom(17);	// needs to be before set_center in order to allow moving the map small amounts (bug 1567)
			map.set_center(thisLoc);
			geocoder.geocode({'latLng':marker.get_position()},reverseGeocodeHandler);	
		} else {
			var utmAddress = address.match(regexpUTM);
			if (utmAddress) {
				var utmComponents = utmAddress[0].split(".");
				var zone = utmComponents[0];
				if (zone < 24 && zone > 0) {
					var epsg = 26900 + parseFloat(zone);
					var dest = new Proj4js.Proj('EPSG:4326');   
					var source = new Proj4js.Proj('EPSG:'+epsg);   
					var p = {x:parseFloat(utmComponents[1]),y:parseFloat(utmComponents[2])};
					Proj4js.transform(source, dest, p);      //do the transformation.  x and y are modified in place
					var thisLoc = new google.maps.LatLng(p.y,p.x);
						if (marker) {
						marker.set_position(thisLoc);
					} else { // else, generate and wireup marker - need to abstract that code.
						generateMarker(thisLoc);
						}
					map.set_zoom(17); // needs to be before set_center in order to allow moving the map small amounts (bug 1567)
					map.set_center(thisLoc);
					geocoder.geocode({'latLng':marker.get_position()},reverseGeocodeHandler);
				}
			}
		}
	}
}

function reverseGeocodeHandler (results,status){
			  if (status == google.maps.GeocoderStatus.OK) {
				document.getElementById('geocode_label').innerHTML = "Reverse Geocode";
				document.getElementById('geocode_results').innerHTML = results[0].formatted_address;
				document.getElementById('geocode_acc').innerHTML = results[0].geometry.location_type;
			if (results[0].geometry.location_type.length > 14) {
				document.getElementById('geocode_acc').style.fontSize =".8em";
			} else {
				document.getElementById('geocode_acc').style.fontSize ="";
			}				
			  }
			}

function generateMarker(loc)  {
	marker = new google.maps.Marker({
	  position: loc,
	  map: map,
	  draggable: true
	 });
	document.getElementById('birdseye_link').innerHTML = '<a href="#" onclick="javascript:open_birdseye()">Birdseye...</a>';
	// Moved the map event click listener to Initialize
	google.maps.event.addListener(marker,'position_changed',function(event) {
		if (!birdseye_is_closed()) {  // if birdseye window is not closed (true), or truthy (unavail)
			var curr_url = "http://www.bing.com/maps/default.aspx?cp=" + marker.get_position().lat() + "~" + marker.get_position().lng() + "&style=o&lvl=2&v=2";
			birdseye_window.location = curr_url;
			birdseye_window.focus();
		}
		displayCoords(marker.get_position().lat(), marker.get_position().lng());
		// don't reverse geocode here because it will reverse geocode after geocode. Rather, reverse Geocode on mapClick and Marker dragend
	});
	google.maps.event.addListener(marker,'dragend',function(event) {
		geocoder.geocode({'latLng':marker.get_position()},reverseGeocodeHandler);
	});
	
}

function open_birdseye() {
    if (birdseye_is_closed()) {
	    //birdseye_window = null;
        //birdseye_window = window.open('about:blank','birdseye_win','location=no,resizable=-1,menubar=no,toolbar=no,scrollbars=yes,width=800,height=600');
        var curr_url = "http://www.bing.com/maps/default.aspx?cp=" + marker.get_position().lat() + "~" + marker.get_position().lng() + "&style=o&lvl=2&v=2";
        //birdseye_window.location = curr_url;
		birdseye_window = window.open(curr_url,'birdseye_window','location=no,resizable=-1,menubar=no,toolbar=no,scrollbars=yes,width=900,height=600');
        if (birdseye_is_closed() != "unavail") {
            birdseye_window.focus();
            }
   }
}

 function birdseye_is_closed() {
	 var win_closed = true;
	 try {
		win_closed = birdseye_window.closed;
		} 
	catch (e) {
		win_closed = 'unavail';
		}
	return win_closed;
 }
</script>

<script type='text/javascript'>
function displaySettings() {
	document.getElementById("container").style.display='none';
	document.getElementById("settingsScreen").style.display='block';
	prevZoomControl = zoomControl;
	}

function hideSettings() {
	if (prevZoomControl != zoomControl) {
		location.reload();
		}
	document.getElementById("settingsScreen").style.display='none';
	document.getElementById("container").style.display='block';
}

function displayInfo() {
	document.getElementById("settingsScreen").style.display='none';
	document.getElementById("infoScreen").style.display='block';
}

function hideInfo() {
	document.getElementById("infoScreen").style.display='none';
	document.getElementById("settingsScreen").style.display='block';
}


function setZoomControl() {
	if (document.getElementById('zoomControl').checked) { zoomControl = "SMALL"; }
	else { zoomControl = "ZOOM_PAN"; }
	setCookie("userZoomControl",zoomControl,cookieDuration);
}

</script>

<script type='text/javascript'>
/* initializeExternalAppButton()
Searches the directory of GMaptBrowser for a file of the format llApp-*.exe.
If found, prompt user if they wish to Link to that application.  If they
choose to link, display a single button with an onClick function that will
run the application with the command line arguments of latitude and longitude,
separated by spaces.

ie: llApp-EFS.exe 42.23 -71.32

Programs can be easily written in AutoHotkey, AutoIt, any other scripting
language of choice, or in more serious programming languages.
*/

function initializeExternalAppButton() {
  var lastApp = getCookie("userApp") || "NO APP CHOSEN";
  if (lastApp != "IGNORE") {
	  var llApplicationType = ".exe";
	  var llApplicationPrefix = "llApp-";
	  var fso, f, fc, s, folderspec;
	  var thisItem, answer,buttonObj;
	  fso = new ActiveXObject("Scripting.FileSystemObject");
	  folderspec=fso.GetAbsolutePathName("");
	  f = fso.GetFolder(folderspec);
	  fc = new Enumerator(f.files);
	  
	  s = "";
	  buttonObj = document.getElementById("externalAppButton");
	  for (; !fc.atEnd(); fc.moveNext())
	  {
	  thisItem = fc.item().Name;
		if ((thisItem.substr(thisItem.length-4, 4) == llApplicationType) && (thisItem.substr(0,6) == llApplicationPrefix)) {
			if (lastApp != "NO APP CHOSEN") {
				if (lastApp == thisItem) answer = true;
				else answer = false;
				}
			else answer = confirm("Link to "+thisItem+"?");
			if (answer) {
				setCookie("userApp",thisItem,cookieDuration);
				s = fc.item().Path;
				// show and wire button
				buttonObj.value = thisItem.substring(6,thisItem.length-4);
				buttonObj.style.position = "static";
				buttonObj.style.left = "0px";
				var shell = new ActiveXObject("WScript.shell");
				document.getElementById('currentUserApp').innerHTML=thisItem;
				buttonObj.onclick = function () {
					if (marker)
						shell.run(fc.item().Path + " " + marker.get_position().lat() + " " + marker.get_position().lng(), 1, false);
					}
				return;
			} // end if confirmed 
			else { //IF no lastApp, but app found, and not confirmed, hide button
				buttonObj.style.position = "absolute";
				buttonObj.style.left = "-10000px";	
				document.getElementById('currentUserApp').innerHTML = '<i>inactive</i>';
				setCookie("userApp","IGNORE",cookieDuration);
			}
		} //
	  }
		if (lastApp != "IGNORE" && lastApp != "NO APP CHOSEN") { // if there was a lastApp, and we actually reach this point (ie:lastApp doesn't match), clear lastApp, and run again.
			setCookie("userApp","",new Date()-1000);	
			location.reload();
			}
	  } 
	}	
initializeExternalAppButton();

document.onkeydown = function() {
	if (event.ctrlKey && event.altKey && event.keyCode == 82) {
		if (confirm("Reset settings?")) {
			clearCookies();
			location.reload();
		}
	}
}

</script>
</body>
</html>